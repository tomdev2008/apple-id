package com.appleframework.id;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;

import org.apache.log4j.Logger;
import org.springframework.data.redis.core.RedisTemplate;

import com.appleframework.id.exception.IdException;
import com.appleframework.id.redis.IRedisClient;
import com.appleframework.id.redis.PoolConfig;
import com.appleframework.id.redis.RedisClientFactory;

/**
 * This id generator utilizes Redis (http://redis.io/) to generate serial IDs.
 * 
 * <p>
 * Persistency: IDs generated by this id-generator are persistent (assuming the
 * Redis backend runs in persistent mode).
 * </p>
 * 
 * @author Thanh Nguyen <btnguyen2k@gmail.com>
 * @since 0.1.0
 */
public class RedisIdGenerator extends SerialIdGenerator implements IdentityGenerator {

	private static Logger logger = Logger.getLogger(RedisIdGenerator.class);

    /**
     * Helper method to obtain {@link RedisIdGenerator}.
     * 
     * @param redisTemplate
     * @return
     */
	public static RedisIdGenerator getInstance(final RedisTemplate<String, Object> redisTemplate) {
		StringBuilder key = new StringBuilder();
		key.append(redisTemplate.toString());
		try {
			RedisIdGenerator idGen = (RedisIdGenerator) idGenerators.get(key.toString(),
					new Callable<SerialIdGenerator>() {
						@Override
						public SerialIdGenerator call() throws Exception {
							RedisIdGenerator idGen = new RedisIdGenerator();
							idGen.setRedisTemplate(redisTemplate).init();
							return idGen;
						}
					});
			return idGen;
		} catch (ExecutionException e) {
			logger.warn(e.getMessage(), e);
			return null;
		}
	}

    private RedisTemplate<String, Object> redisTemplate;

    public RedisTemplate<String, Object> getRedisTemplate() {
		return redisTemplate;
	}
    
	public RedisIdGenerator setRedisTemplate(RedisTemplate<String, Object> redisTemplate) {
		this.redisTemplate = redisTemplate;
		return this;
	}
	
    /**
     * {@inheritDoc}
     */
    @Override
    public RedisIdGenerator init() {
        super.init();
        return this;
    }

    public void destroy() {
        super.destroy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public long nextId(final String namespace) {
        IRedisClient redisClient = redisFactory.getRedisClient(redisHost, redisPort, redisUser,
                redisPassword, redisPoolConfig);
        if (redisClient != null) {
            try {
                return redisClient.incBy(namespace, 1);
            } catch (Exception e) {
                throw new IdException.OperationFailedException(e);
            } finally {
                redisClient.close();
            }
        } else {
            return -1;
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public long currentId(final String namespace) {
        IRedisClient redisClient = redisFactory.getRedisClient(redisHost, redisPort, redisUser,
                redisPassword, redisPoolConfig);
        if (redisClient != null) {
            try {
                String value = redisClient.get(namespace);
                return Long.parseLong(value);
            } catch (NumberFormatException | NullPointerException e) {
                return 0;
            } catch (Exception e) {
                throw new IdException.OperationFailedException(e);
            } finally {
                redisClient.close();
            }
        } else {
            return -1;
        }
    }

    /**
     * {@inheritDoc}
     * 
     * @since 0.4.0
     */
    @Override
    public boolean setValue(final String namespace, final long value) {
        IRedisClient redisClient = redisFactory.getRedisClient(redisHost, redisPort, redisUser,
                redisPassword, redisPoolConfig);
        if (redisClient != null) {
            try {
                redisClient.set(namespace, String.valueOf(value), IRedisClient.TTL_PERSISTENT);
                return true;
            } catch (Exception e) {
                throw new IdException.OperationFailedException(e);
            } finally {
                redisClient.close();
            }
        } else {
            return false;
        }
    }
}